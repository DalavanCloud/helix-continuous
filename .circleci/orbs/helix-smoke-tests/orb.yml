version: 2.1

description: |
  Runs Project Helix smoke tests

executors:
    node8:
        docker:
            - image: circleci/node:8
jobs:
    helix-smoke-tests:
        executor: node8

        description: "Run smoke tests on a remote repository, wait for execution and report status"
        parameters:
            token:
                type: string
                description: the CircleCI token to execute a CircleCI job on the smoke test repo
            remote_repo:
                type: string
                description: the repo that hosts the smoke tests
        steps:
            - run-helix-smoke-tests-cmd:
                token: << parameters.token >>
                remote_repo: << parameters.remote_repo >>
commands:
    run-helix-smoke-tests-cmd:
        description: "Run smoke tests on a remote repository, wait for execution and report status"
        parameters:
            token:
                type: string
            local_repo:
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            local_branch:
                type: string
                default: ${CIRCLE_BRANCH}
            remote_repo:
                type: string
            remote_branch:
                type: string
                default: master
        steps:
            - run:
                name: Call remote smoke tests job
                command: |
                    curl \
                        --user << parameters.token>>: \
                        --header "Content-Type: application/json" \
                        --silent \
                        --data "{\"build_parameters\": {\"GDM_MODULE_BRANCHES\": { \"<< parameters.local_repo >>\": \"<< parameters.local_branch >>\"}}}" \
                        --request POST "https://circleci.com/api/v1.1/project/github/<< parameters.remote_repo >>/tree/<< parameters.remote_branch >>" > run_tests_cmd_job.json
            - run:
                name: Wait for smoke tests job to complete and report status
                command: |
                    smoke_job_build_num=$(jq '.build_num' < run_tests_cmd_job.json)

                    build_url="https://circleci.com/api/v1.1/project/github/<< parameters.remote_repo >>/${smoke_job_build_num}"

                    smoke_result_file="smoke_result.json"

                    echo "Waiting now for smoke tests job execution. See build ${build_url}."

                    RUNNING=true
                        while [ $RUNNING == true ]; do
                        sleep 10;
                        status=$(curl --silent --header "Accept: application/json" "${build_url}?circle-token=$1" | tee ${smoke_result_file} | jq -r '.status');
                        echo 'running queued scheduled not_running' | grep --silent "$status" || RUNNING=false;
                        echo -n "."
                    done

                    echo ""
                    echo "Smoke tests ${build_url} finished with status ${status}"

                    if [[ $status == 'fixed success' ]]
                    then
                        exit_code=0
                    else
                        exit_code=1

                        # get the output_url property from the first failing task
                        output_url=$(jq -r "[.steps[] | select(.actions[0].failed == true)][0] | .actions[0].output_url" ${smoke_result_file});

                        echo ""
                        echo "Smoke tests error message:"
                        echo ""

                        if [ ! -z "${output_url}" ]
                        then
                            # call the output url to fetch the error message and display it
                            error_message=$(curl --silent --compressed --header "Accept: application/json" "${output_url}" | jq -r '.[0].message');
                            echo -n "${error_message}" | tr -d '\r'
                        else
                            # no output_url, unknown error
                            echo "Unknown error. Check the smoke test job execution logs for more details."
                        fi
                        echo ""
                    fi
                    exit $exit_code
    